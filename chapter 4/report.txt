Cookbook
precedres change the shared state 
in chapter 2 we used this type of programming 
it's true we used only a stack as a shared state but we divieded the code into tasks and precedres

for this type of programming the major drawback is the idempotancy of the function since calling
the function twice may not give the same output 

** idempotance : the quality of the same power (same + power)
meaning: when you call a function more than once it must have the same result as calling it once 'same power'
but since the precedres defined in this problem and in this type of programming act on the state and may act
on it in a cumulative manner the output of each call will be differanct.

the functional prgoramming is much better since it is idempotance it always gives the same output 
for a given input and it won't face the problem of chaning a mutable state or data.

**ask for side effect, when to use this style 

for me 
** scope of the shared state is a problem 